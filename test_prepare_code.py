from prepare_code import prepare_t5_data
code = """
pragma solidity 0.5.4;\n\ninterface IERC20 {\n\n\n\n\n\n    function balanceOf(address account) external view returns (uint256);\n\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\n\n\n\n}\n\ncontract Ownable {\n\n\n\n\n\n    address private _owner;\n\n\n\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n\n\n    constructor() internal {\n\n\n        _owner = msg.sender;\n\n\n        emit OwnershipTransferred(address(0), _owner);\n\n\n    }\n\n\n\n\n\n    function owner() public view returns (address) {\n\n\n        return _owner;\n\n\n    }\n\n\n\n\n\n    function isOwner() public view returns (bool) {\n\n\n        return msg.sender == _owner;\n\n\n    }\n\n\n\n\n\n    modifier onlyOwner() {\n\n\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n\n\n        _;\n\n\n    }\n\n\n\n\n\n    function transferOwnership(address newOwner) public onlyOwner {\n\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n\n        _owner = newOwner;\n\n\n    }\n\n\n\n\n\n}\n\nlibrary SafeMath {\n\n\n    /**\n\n\n     * @dev Returns the addition of two unsigned integers, reverting on\n\n\n     * overflow.\n\n\n     *\n\n\n     * Counterpart to Solidity's `+` operator.\n\n\n     *\n\n\n     * Requirements:\n\n\n     * - Addition cannot overflow.\n\n\n     */\n\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n\n\n        uint256 c = a + b;\n\n\n        require(c >= a, \"SafeMath: addition overflow\");\n\n\n\n\n\n        return c;\n\n\n    }\n\n\n\n\n\n    /**\n\n\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n\n\n     * overflow (when the result is negative).\n\n\n     *\n\n\n     * Counterpart to Solidity's `-` operator.\n\n\n     *\n\n\n     * Requirements:\n\n\n     * - Subtraction cannot overflow.\n\n\n     */\n\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\n\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n\n\n    }\n\n\n\n\n\n    /**\n\n\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n\n\n     * overflow (when the result is negative).\n\n\n     *\n\n\n     * Counterpart to Solidity's `-` operator.\n\n\n     *\n\n\n     * Requirements:\n\n\n     * - Subtraction cannot overflow.\n\n\n     *\n\n\n     * _Available since v2.4.0._\n\n\n     */\n\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\n\n        require(b <= a, errorMessage);\n\n\n        uint256 c = a - b;\n\n\n\n\n\n        return c;\n\n\n    }\n\n\n\n\n\n    /**\n\n\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n\n\n     * overflow.\n\n\n     *\n\n\n     * Counterpart to Solidity's `*` operator.\n\n\n     *\n\n\n     * Requirements:\n\n\n     * - Multiplication cannot overflow.\n\n\n     */\n\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\n\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\n\n        // benefit is lost if 'b' is also tested.\n\n\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n\n\n        if (a == 0) {\n\n\n            return 0;\n\n\n        }\n\n\n\n\n\n        uint256 c = a * b;\n\n\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n\n\n\n\n        return c;\n\n\n    }\n\n\n\n\n\n    /**\n\n\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n\n\n     * division by zero. The result is rounded towards zero.\n\n\n     *\n\n\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n\n\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n\n\n     * uses an invalid opcode to revert (consuming all remaining gas).\n\n\n     *\n\n\n     * Requirements:\n\n\n     * - The divisor cannot be zero.\n\n\n     */\n\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n\n\n        return div(a, b, \"SafeMath: division by zero\");\n\n\n    }\n\n\n\n\n\n    /**\n\n\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n\n\n     * division by zero. The result is rounded towards zero.\n\n\n     *\n\n\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n\n\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n\n\n     * uses an invalid opcode to revert (consuming all remaining gas).\n\n\n     *\n\n\n     * Requirements:\n\n\n     * - The divisor cannot be zero.\n\n\n     *\n\n\n     * _Available since v2.4.0._\n\n\n     */\n\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\n\n        // Solidity only automatically asserts when dividing by 0\n\n\n        require(b > 0, errorMessage);\n\n\n        uint256 c = a / b;\n\n\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n\n\n\n\n        return c;\n\n\n    }\n\n\n\n\n\n    /**\n\n\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n\n\n     * Reverts when dividing by zero.\n\n\n     *\n\n\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n\n\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n\n\n     * invalid opcode to revert (consuming all remaining gas).\n\n\n     *\n\n\n     * Requirements:\n\n\n     * - The divisor cannot be zero.\n\n\n     */\n\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n\n\n        return mod(a, b, \"SafeMath: modulo by zero\");\n\n\n    }\n\n\n\n\n\n    /**\n\n\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n\n\n     * Reverts with custom message when dividing by zero.\n\n\n     *\n\n\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n\n\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n\n\n     * invalid opcode to revert (consuming all remaining gas).\n\n\n     *\n\n\n     * Requirements:\n\n\n     * - The divisor cannot be zero.\n\n\n     *\n\n\n     * _Available since v2.4.0._\n\n\n     */\n\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\n\n        require(b != 0, errorMessage);\n\n\n        return a % b;\n\n\n    }\n\n\n}\n\ncontract ZildFinanceCoin is Ownable, IERC20 {\n\n\n\n\n\n    using SafeMath for uint256;\n\n\n\n\n\n    string public constant name = 'Zild Finance Coin';\n\n\n    string public constant symbol = 'Zild';\n\n\n    uint8 public constant decimals = 18;\n\n\n    uint256 public totalSupply = 9980 * 10000 * 10 ** uint256(decimals);\n\n\n    uint256 public allowBurn = 2100 * 10000 * 10 ** uint256(decimals);\n\n\n    uint256 public tokenDestroyed;\n\n\n\t\n\n\n    uint256 public constant FounderAllocation = 1497 * 10000 * 10 ** uint256(decimals);\n\n\n    uint256 public constant FounderLockupAmount = 998 * 10000 * 10 ** uint256(decimals);\n\n\n    uint256 public constant FounderLockupCliff = 365 days;\n\n\n    uint256 public constant FounderReleaseInterval = 30 days;\n\n\n    uint256 public constant FounderReleaseAmount = 20.7916 * 10000 * 10 ** uint256(decimals);\n\n\n    uint256 public constant MarketingAllocation = 349 * 10000 * 10 ** uint256(decimals);\n\n\n    uint256 public constant FurnaceAllocation = 150 * 10000 * 10 ** uint256(decimals);\n\n\n\t\n\n\n    address public founder = address(0);\n\n\n    uint256 public founderLockupStartTime = 0;\n\n\n    uint256 public founderReleasedAmount = 0;\n\n\n\n\n\n    mapping (address => uint256) private _balances;\n\n\n    mapping (address => mapping (address => uint256)) private _allowances;    \n\n\n    mapping (address => bool) public frozenAccount;\n\n\n\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n    event Approval(address indexed from, address indexed to, uint256 value);\n\n\n    event ChangeFounder(address indexed previousFounder, address indexed newFounder);\n\n\n    event SetMinter(address indexed minter);\n\n\n    event SetMarketing(address indexed marketing);\n\n\n    event SetFurnace(address indexed furnace);\t\n\n\n    event Burn(address indexed _from, uint256 _tokenDestroyed, uint256 _timestamp);\n\n\n    event FrozenFunds(address target, bool frozen);\n\n\n\t\n\n\n    constructor(address _founder, address _marketing) public {\n\n\n        require(_founder != address(0), \"ZildFinanceCoin: founder is the zero address\");\n\n\n        require(_marketing != address(0), \"ZildFinanceCoin: operator is the zero address\");\n\n\n        founder = _founder;\n\n\n        founderLockupStartTime = block.timestamp;\n\n\n        _balances[address(this)] = totalSupply;\n\n\n        _transfer(address(this), _marketing, MarketingAllocation);\n\n\n    }\n\n\n\n\n\n    function release() public {\n\n\n        uint256 currentTime = block.timestamp;\n\n\n        uint256 cliffTime = founderLockupStartTime.add(FounderLockupCliff);\n\n\n        if (currentTime < cliffTime) return;\n\n\n        if (founderReleasedAmount >= FounderLockupAmount) return;\n\n\n        uint256 month = currentTime.sub(cliffTime).div(FounderReleaseInterval);\n\n\n        uint256 releaseAmount = month.mul(FounderReleaseAmount);\n\n\n        if (releaseAmount > FounderLockupAmount) releaseAmount = FounderLockupAmount;\n\n\n        if (releaseAmount <= founderReleasedAmount) return;\n\n\n        uint256 amount = releaseAmount.sub(founderReleasedAmount);\n\n\n        founderReleasedAmount = releaseAmount;\n\n\n        _transfer(address(this), founder, amount);\n\n\n    }\n\n\n\n\n\n    function balanceOf(address account) public view returns (uint256) {\n\n\n        return _balances[account];\n\n\n    }\n\n\n\n\n\n    function transfer(address to, uint256 amount) public returns (bool) {\n\n\n        require(to != address(0), \"ERC20: tranfer to the zero address\");\n\n\n        require(!frozenAccount[msg.sender]);\n\n\n        require(!frozenAccount[to]);\n\n\n        _transfer(msg.sender, to, amount);\n\n\n        return true;\n\n\n    }\n\n\n\t\n\n\n    function burn(uint256 _value) public returns (bool){\n\n\n        _burn(msg.sender, _value);\n\n\n        return true;\n\n\n    }\n\n\n\n\n\n    function _burn(address _who, uint256 _burntAmount) internal {\n\n\n        require (tokenDestroyed.add(_burntAmount) <= allowBurn, \"ZildFinanceCoin: exceeded the maximum allowable burning amount\" );\n\n\n        require(_balances[msg.sender] >= _burntAmount && _burntAmount > 0);\n\n\n        _transfer(address(_who), address(0), _burntAmount);\n\n\n        totalSupply = totalSupply.sub(_burntAmount);\n\n\n        tokenDestroyed = tokenDestroyed.add(_burntAmount);\n\n\n        emit Burn(_who, _burntAmount, block.timestamp);\n\n\n    }\n\n\n\t\n\n\n\n\n\n    function allowance(address from, address to) public view returns (uint256) {\n\n\n        return _allowances[from][to];\n\n\n    }\n\n\n\n\n\n    function approve(address to, uint256 amount) public returns (bool) {\n\n\n        _approve(msg.sender, to, amount);\n\n\n        return true;\n\n\n    }\n\n\n\n\n\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n\n\n        uint256 remaining = _allowances[from][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\");\n\n\n        require(to != address(0), \"ERC20: tranfer to the zero address\");\n\n\n        require(!frozenAccount[from]);\n\n\n        require(!frozenAccount[to]);\n\n\n        require(!frozenAccount[msg.sender]);\n\n\n        _transfer(from, to, amount);\n\n\n        _approve(from, msg.sender, remaining);\n\n\n        return true;\n\n\n    }\n\n\n\n\n\n    function _transfer(address from, address to, uint256 amount) private {\n\n\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n\n\n        _balances[from] = _balances[from].sub(amount, \"ERC20: transfer amount exceeds balance\");\n\n\n        _balances[to] = _balances[to].add(amount);\n\n\n        emit Transfer(from, to, amount);\n\n\n    }\n\n\n\n\n\n    function _approve(address from, address to, uint256 amount) private {\n\n\n        require(from != address(0), \"ERC20: approve from the zero address\");\n\n\n        require(to != address(0), \"ERC20: approve to the zero address\");\n\n\n        _allowances[from][to] = amount;\n\n\n        emit Approval(from, to, amount);\n\n\n    }\n\n\n\n\n\n    function changeFounder(address _founder) public onlyOwner {\n\n\n        require(_founder != address(0), \"ZildFinanceCoin: founder is the zero address\");\n\n\n        emit ChangeFounder(founder, _founder);\n\n\n        founder = _founder;\n\n\n    }\n\n\n\n\n\n    function setMinter(address minter) public onlyOwner {\n\n\n        require(minter != address(0), \"ZildFinanceCoin: minter is the zero address\");\n\n\n        require(_balances[minter] == 0, \"ZildFinanceCoin: minter has been initialized\");\n\n\n        _transfer(address(this), minter, totalSupply.sub(FounderAllocation));\n\n\n        emit SetMinter(minter);\n\n\n    }\n\n\n\n\n\n    function setFurnace(address furnace) public onlyOwner {\n\n\n        require(furnace != address(0), \"ZildFinanceCoin: furnace is the zero address\");\n\n\n        require(_balances[furnace] == 0, \"ZildFinanceCoin: furnace has been initialized\");\n\n\n        _transfer(address(this), furnace, FurnaceAllocation);\n\n\n        emit SetFurnace(furnace);\n\n\n    }\n\n\n\t\n\n\n    function freezeAccount(address _target, bool _bool) public onlyOwner {\n\n\n        if (_target != address(0)) {\n\n\n            frozenAccount[_target] = _bool;\n\n\n            emit FrozenFunds(_target,_bool);\n\n\n        }\n\n\n    }\n\n\n\n\n\n}\n
"""
print(prepare_t5_data(code))